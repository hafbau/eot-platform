
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  domain: 'domain',
  isActive: 'isActive',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  organizationId: 'organizationId',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  location: 'location',
  organizationId: 'organizationId',
  status: 'status',
  contractValue: 'contractValue',
  contractType: 'contractType',
  startDate: 'startDate',
  plannedCompletion: 'plannedCompletion',
  currentCompletion: 'currentCompletion',
  healthScore: 'healthScore',
  projectManagerId: 'projectManagerId',
  metadata: 'metadata',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DelayEventScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  activityId: 'activityId',
  activityName: 'activityName',
  detectionDate: 'detectionDate',
  delayDays: 'delayDays',
  causeType: 'causeType',
  probabilityScore: 'probabilityScore',
  evidenceStrength: 'evidenceStrength',
  status: 'status',
  description: 'description',
  estimatedCost: 'estimatedCost',
  criticalPath: 'criticalPath',
  detectedById: 'detectedById',
  metadata: 'metadata',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClaimScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  delayEventId: 'delayEventId',
  referenceNumber: 'referenceNumber',
  title: 'title',
  description: 'description',
  submissionDate: 'submissionDate',
  noticeDate: 'noticeDate',
  claimAmount: 'claimAmount',
  timeImpactDays: 'timeImpactDays',
  status: 'status',
  responseDueDate: 'responseDueDate',
  submittedById: 'submittedById',
  workflow: 'workflow',
  metadata: 'metadata',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EvidenceScalarFieldEnum = {
  id: 'id',
  delayEventId: 'delayEventId',
  claimId: 'claimId',
  type: 'type',
  title: 'title',
  description: 'description',
  sourceSystem: 'sourceSystem',
  filePath: 'filePath',
  fileId: 'fileId',
  relevanceScore: 'relevanceScore',
  extractedText: 'extractedText',
  metadata: 'metadata',
  uploadedById: 'uploadedById',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  description: 'description',
  format: 'format',
  version: 'version',
  baselineDate: 'baselineDate',
  statusDate: 'statusDate',
  filePath: 'filePath',
  fileId: 'fileId',
  metadata: 'metadata',
  isBaseline: 'isBaseline',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ActionItemScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  priority: 'priority',
  dueDate: 'dueDate',
  projectId: 'projectId',
  assignedToId: 'assignedToId',
  status: 'status',
  completedAt: 'completedAt',
  metadata: 'metadata',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FileMetadataScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  originalName: 'originalName',
  mimeType: 'mimeType',
  size: 'size',
  checksum: 'checksum',
  organizationId: 'organizationId',
  uploadedById: 'uploadedById',
  path: 'path',
  isPublic: 'isPublic',
  tags: 'tags',
  metadata: 'metadata',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StorageQuotaScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  usedBytes: 'usedBytes',
  limitBytes: 'limitBytes',
  fileCount: 'fileCount',
  maxFileCount: 'maxFileCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionDataScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deviceInfo: 'deviceInfo',
  location: 'location',
  expiresAt: 'expiresAt',
  lastActivityAt: 'lastActivityAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MfaSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  isEnabled: 'isEnabled',
  method: 'method',
  secret: 'secret',
  backupCodes: 'backupCodes',
  lastUsedAt: 'lastUsedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  isUsed: 'isUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsEventScalarFieldEnum = {
  id: 'id',
  eventType: 'eventType',
  userId: 'userId',
  organizationId: 'organizationId',
  properties: 'properties',
  timestamp: 'timestamp',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  userId: 'userId',
  organizationId: 'organizationId',
  changes: 'changes',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  DIRECTOR: 'DIRECTOR',
  PROJECT_MANAGER: 'PROJECT_MANAGER',
  SCHEDULER: 'SCHEDULER',
  ADMIN: 'ADMIN',
  USER: 'USER',
  VIEWER: 'VIEWER'
};

exports.ProjectStatus = exports.$Enums.ProjectStatus = {
  PLANNING: 'PLANNING',
  ACTIVE: 'ACTIVE',
  ON_HOLD: 'ON_HOLD',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.ContractType = exports.$Enums.ContractType = {
  FIDIC_RED: 'FIDIC_RED',
  FIDIC_YELLOW: 'FIDIC_YELLOW',
  FIDIC_SILVER: 'FIDIC_SILVER',
  NEC3: 'NEC3',
  NEC4: 'NEC4',
  CUSTOM: 'CUSTOM'
};

exports.DelayType = exports.$Enums.DelayType = {
  CLIENT_DELAY: 'CLIENT_DELAY',
  CONTRACTOR_DELAY: 'CONTRACTOR_DELAY',
  WEATHER: 'WEATHER',
  THIRD_PARTY: 'THIRD_PARTY',
  FORCE_MAJEURE: 'FORCE_MAJEURE'
};

exports.DelayStatus = exports.$Enums.DelayStatus = {
  DETECTED: 'DETECTED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  CLAIM_PREPARED: 'CLAIM_PREPARED',
  CLAIM_SUBMITTED: 'CLAIM_SUBMITTED',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.ClaimStatus = exports.$Enums.ClaimStatus = {
  DRAFT: 'DRAFT',
  UNDER_REVIEW: 'UNDER_REVIEW',
  SUBMITTED: 'SUBMITTED',
  UNDER_EVALUATION: 'UNDER_EVALUATION',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  SETTLED: 'SETTLED'
};

exports.EvidenceType = exports.$Enums.EvidenceType = {
  EMAIL: 'EMAIL',
  DOCUMENT: 'DOCUMENT',
  PHOTO: 'PHOTO',
  MEETING_MINUTES: 'MEETING_MINUTES',
  SITE_REPORT: 'SITE_REPORT',
  WEATHER_DATA: 'WEATHER_DATA',
  SCHEDULE: 'SCHEDULE',
  RFI: 'RFI',
  CHANGE_ORDER: 'CHANGE_ORDER'
};

exports.ScheduleFormat = exports.$Enums.ScheduleFormat = {
  PRIMAVERA_P6: 'PRIMAVERA_P6',
  MS_PROJECT: 'MS_PROJECT',
  ASTA: 'ASTA',
  CSV: 'CSV',
  EXCEL: 'EXCEL'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.ActionItemStatus = exports.$Enums.ActionItemStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.MfaMethod = exports.$Enums.MfaMethod = {
  TOTP: 'TOTP',
  SMS: 'SMS',
  EMAIL: 'EMAIL'
};

exports.Prisma.ModelName = {
  Organization: 'Organization',
  User: 'User',
  Project: 'Project',
  DelayEvent: 'DelayEvent',
  Claim: 'Claim',
  Evidence: 'Evidence',
  Schedule: 'Schedule',
  ActionItem: 'ActionItem',
  FileMetadata: 'FileMetadata',
  StorageQuota: 'StorageQuota',
  SessionData: 'SessionData',
  MfaSettings: 'MfaSettings',
  PasswordResetToken: 'PasswordResetToken',
  AnalyticsEvent: 'AnalyticsEvent',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
